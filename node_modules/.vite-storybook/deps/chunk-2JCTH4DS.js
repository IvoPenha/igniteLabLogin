import {
  require_is_regex,
  require_is_symbol
} from "./chunk-TAYI23FM.js";
import {
  require_memoizerific
} from "./chunk-NLF5WMNE.js";
import {
  __commonJS,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/is-function/index.js
var require_is_function = __commonJS({
  "node_modules/is-function/index.js"(exports, module) {
    module.exports = isFunction2;
    var toString = Object.prototype.toString;
    function isFunction2(fn) {
      if (!fn) {
        return false;
      }
      var string = toString.call(fn);
      return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    }
  }
});

// node_modules/telejson/node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/telejson/node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/telejson/node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/telejson/node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/telejson/node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/telejson/node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    module.exports = root2;
  }
});

// node_modules/telejson/node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/telejson/node_modules/lodash/_Symbol.js"(exports, module) {
    var root2 = require_root();
    var Symbol2 = root2.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/telejson/node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/telejson/node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value2) {
      var isOwn = hasOwnProperty.call(value2, symToStringTag), tag = value2[symToStringTag];
      try {
        value2[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result2 = nativeObjectToString.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag] = tag;
        } else {
          delete value2[symToStringTag];
        }
      }
      return result2;
    }
    module.exports = getRawTag;
  }
});

// node_modules/telejson/node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/telejson/node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value2) {
      return nativeObjectToString.call(value2);
    }
    module.exports = objectToString;
  }
});

// node_modules/telejson/node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/telejson/node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/telejson/node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/telejson/node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value2) {
      return value2 != null && typeof value2 == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/telejson/node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/telejson/node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol2(value2) {
      return typeof value2 == "symbol" || isObjectLike(value2) && baseGetTag(value2) == symbolTag;
    }
    module.exports = isSymbol2;
  }
});

// node_modules/telejson/node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/telejson/node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol2 = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value2, object) {
      if (isArray(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol2(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/telejson/node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/telejson/node_modules/lodash/isObject.js"(exports, module) {
    function isObject3(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    module.exports = isObject3;
  }
});

// node_modules/telejson/node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/telejson/node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject3 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value2) {
      if (!isObject3(value2)) {
        return false;
      }
      var tag = baseGetTag(value2);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction2;
  }
});

// node_modules/telejson/node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/telejson/node_modules/lodash/_coreJsData.js"(exports, module) {
    var root2 = require_root();
    var coreJsData = root2["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/telejson/node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/telejson/node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/telejson/node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/telejson/node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/telejson/node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/telejson/node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject3 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value2) {
      if (!isObject3(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction2(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value2));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/telejson/node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/telejson/node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    module.exports = getValue;
  }
});

// node_modules/telejson/node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/telejson/node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key2) {
      var value2 = getValue(object, key2);
      return baseIsNative(value2) ? value2 : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/telejson/node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/telejson/node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/telejson/node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/telejson/node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/telejson/node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/telejson/node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key2) {
      var result2 = this.has(key2) && delete this.__data__[key2];
      this.size -= result2 ? 1 : 0;
      return result2;
    }
    module.exports = hashDelete;
  }
});

// node_modules/telejson/node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result2 = data[key2];
        return result2 === HASH_UNDEFINED ? void 0 : result2;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/telejson/node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/telejson/node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    module.exports = hashHas;
  }
});

// node_modules/telejson/node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key2, value2) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED : value2;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/telejson/node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/telejson/node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/telejson/node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/telejson/node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/telejson/node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/telejson/node_modules/lodash/eq.js"(exports, module) {
    function eq(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/telejson/node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/telejson/node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key2) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/telejson/node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/telejson/node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/telejson/node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/telejson/node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/telejson/node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/telejson/node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key2, value2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        ++this.size;
        data.push([key2, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/telejson/node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/telejson/node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/telejson/node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/telejson/node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root2 = require_root();
    var Map2 = getNative(root2, "Map");
    module.exports = Map2;
  }
});

// node_modules/telejson/node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/telejson/node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/telejson/node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/telejson/node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/telejson/node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/telejson/node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/telejson/node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/telejson/node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key2) {
      var result2 = getMapData(this, key2)["delete"](key2);
      this.size -= result2 ? 1 : 0;
      return result2;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/telejson/node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/telejson/node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/telejson/node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/telejson/node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key2, value2) {
      var data = getMapData(this, key2), size = data.size;
      data.set(key2, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/telejson/node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/telejson/node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/telejson/node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/telejson/node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize2(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key2)) {
          return cache.get(key2);
        }
        var result2 = func.apply(this, args);
        memoized.cache = cache.set(key2, result2) || cache;
        return result2;
      };
      memoized.cache = new (memoize2.Cache || MapCache)();
      return memoized;
    }
    memoize2.Cache = MapCache;
    module.exports = memoize2;
  }
});

// node_modules/telejson/node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/telejson/node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize2 = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result2 = memoize2(func, function(key2) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key2;
      });
      var cache = result2.cache;
      return result2;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/telejson/node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/telejson/node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result2 = [];
      if (string.charCodeAt(0) === 46) {
        result2.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result2;
    });
    module.exports = stringToPath;
  }
});

// node_modules/telejson/node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/telejson/node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result2 = Array(length);
      while (++index < length) {
        result2[index] = iteratee(array[index], index, array);
      }
      return result2;
    }
    module.exports = arrayMap;
  }
});

// node_modules/telejson/node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/telejson/node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol2 = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray(value2)) {
        return arrayMap(value2, baseToString) + "";
      }
      if (isSymbol2(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result2 = value2 + "";
      return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
    }
    module.exports = baseToString;
  }
});

// node_modules/telejson/node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/telejson/node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value2) {
      return value2 == null ? "" : baseToString(value2);
    }
    module.exports = toString;
  }
});

// node_modules/telejson/node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/telejson/node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value2, object) {
      if (isArray(value2)) {
        return value2;
      }
      return isKey(value2, object) ? [value2] : stringToPath(toString(value2));
    }
    module.exports = castPath;
  }
});

// node_modules/telejson/node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/telejson/node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol2 = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value2) {
      if (typeof value2 == "string" || isSymbol2(value2)) {
        return value2;
      }
      var result2 = value2 + "";
      return result2 == "0" && 1 / value2 == -INFINITY ? "-0" : result2;
    }
    module.exports = toKey;
  }
});

// node_modules/telejson/node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/telejson/node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/telejson/node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/telejson/node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get2(object, path, defaultValue) {
      var result2 = object == null ? void 0 : baseGet(object, path);
      return result2 === void 0 ? defaultValue : result2;
    }
    module.exports = get2;
  }
});

// node_modules/telejson/dist/esm/index.js
var import_is_regex = __toESM(require_is_regex());
var import_is_function = __toESM(require_is_function());
var import_is_symbol = __toESM(require_is_symbol());

// node_modules/telejson/node_modules/isobject/index.js
function isObject(val) {
  return val != null && typeof val === "object" && Array.isArray(val) === false;
}

// node_modules/telejson/dist/esm/index.js
var import_get = __toESM(require_get());
var import_memoizerific = __toESM(require_memoizerific());

// node_modules/telejson/dist/esm/dom-event.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source2 = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source2), true).forEach(function(key2) {
        _defineProperty(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key2, value2) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
var eventProperties = ["bubbles", "cancelBubble", "cancelable", "composed", "currentTarget", "defaultPrevented", "eventPhase", "isTrusted", "returnValue", "srcElement", "target", "timeStamp", "type"];
var customEventSpecificProperties = ["detail"];
function extractEventHiddenProperties(event) {
  var rebuildEvent = eventProperties.filter(function(value2) {
    return event[value2] !== void 0;
  }).reduce(function(acc, value2) {
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, value2, event[value2]));
  }, {});
  if (event instanceof CustomEvent) {
    customEventSpecificProperties.filter(function(value2) {
      return event[value2] !== void 0;
    }).forEach(function(value2) {
      rebuildEvent[value2] = event[value2];
    });
  }
  return rebuildEvent;
}

// node_modules/telejson/dist/esm/index.js
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source2 = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys2(Object(source2), true).forEach(function(key2) {
        _defineProperty2(target, key2, source2[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys2(Object(source2)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source2, key2));
      });
    }
  }
  return target;
}
function _defineProperty2(obj, key2, value2) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value: value2, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value2;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var isRunningInBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
var isObject2 = isObject;
var removeCodeComments = function removeCodeComments2(code) {
  var inQuoteChar = null;
  var inBlockComment = false;
  var inLineComment = false;
  var inRegexLiteral = false;
  var newCode = "";
  if (code.indexOf("//") >= 0 || code.indexOf("/*") >= 0) {
    for (var i = 0; i < code.length; i += 1) {
      if (!inQuoteChar && !inBlockComment && !inLineComment && !inRegexLiteral) {
        if (code[i] === '"' || code[i] === "'" || code[i] === "`") {
          inQuoteChar = code[i];
        } else if (code[i] === "/" && code[i + 1] === "*") {
          inBlockComment = true;
        } else if (code[i] === "/" && code[i + 1] === "/") {
          inLineComment = true;
        } else if (code[i] === "/" && code[i + 1] !== "/") {
          inRegexLiteral = true;
        }
      } else {
        if (inQuoteChar && (code[i] === inQuoteChar && code[i - 1] !== "\\" || code[i] === "\n" && inQuoteChar !== "`")) {
          inQuoteChar = null;
        }
        if (inRegexLiteral && (code[i] === "/" && code[i - 1] !== "\\" || code[i] === "\n")) {
          inRegexLiteral = false;
        }
        if (inBlockComment && code[i - 1] === "/" && code[i - 2] === "*") {
          inBlockComment = false;
        }
        if (inLineComment && code[i] === "\n") {
          inLineComment = false;
        }
      }
      if (!inBlockComment && !inLineComment) {
        newCode += code[i];
      }
    }
  } else {
    newCode = code;
  }
  return newCode;
};
var cleanCode = (0, import_memoizerific.default)(1e4)(function(code) {
  return removeCodeComments(code).replace(/\n\s*/g, "").trim();
});
var convertShorthandMethods = function convertShorthandMethods2(key2, stringified) {
  var fnHead = stringified.slice(0, stringified.indexOf("{"));
  var fnBody = stringified.slice(stringified.indexOf("{"));
  if (fnHead.includes("=>")) {
    return stringified;
  }
  if (fnHead.includes("function")) {
    return stringified;
  }
  var modifiedHead = fnHead;
  modifiedHead = modifiedHead.replace(key2, "function");
  return modifiedHead + fnBody;
};
var dateFormat = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$/;
var isJSON = function isJSON2(input) {
  return input.match(/^[\[\{\"\}].*[\]\}\"]$/);
};
function convertUnconventionalData(data) {
  if (!isObject2(data)) {
    return data;
  }
  var result2 = data;
  var wasMutated = false;
  if (isRunningInBrowser && data instanceof Event) {
    result2 = extractEventHiddenProperties(result2);
    wasMutated = true;
  }
  result2 = Object.keys(result2).reduce(function(acc, key2) {
    try {
      var _result$key;
      (_result$key = result2[key2]) === null || _result$key === void 0 ? void 0 : _result$key.toJSON;
      acc[key2] = result2[key2];
    } catch (err) {
      wasMutated = true;
    }
    return acc;
  }, {});
  return wasMutated ? result2 : data;
}
var replacer = function replacer2(options2) {
  var objects;
  var map;
  var stack;
  var keys;
  return function replace(key2, value2) {
    try {
      if (key2 === "") {
        keys = [];
        objects = /* @__PURE__ */ new Map([[value2, "[]"]]);
        map = /* @__PURE__ */ new Map();
        stack = [];
        return value2;
      }
      var origin = map.get(this) || this;
      while (stack.length && origin !== stack[0]) {
        stack.shift();
        keys.pop();
      }
      if (typeof value2 === "boolean") {
        return value2;
      }
      if (value2 === void 0) {
        if (!options2.allowUndefined) {
          return void 0;
        }
        return "_undefined_";
      }
      if (value2 === null) {
        return null;
      }
      if (typeof value2 === "number") {
        if (value2 === -Infinity) {
          return "_-Infinity_";
        }
        if (value2 === Infinity) {
          return "_Infinity_";
        }
        if (Number.isNaN(value2)) {
          return "_NaN_";
        }
        return value2;
      }
      if (typeof value2 === "bigint") {
        return "_bigint_".concat(value2.toString());
      }
      if (typeof value2 === "string") {
        if (dateFormat.test(value2)) {
          if (!options2.allowDate) {
            return void 0;
          }
          return "_date_".concat(value2);
        }
        return value2;
      }
      if ((0, import_is_regex.default)(value2)) {
        if (!options2.allowRegExp) {
          return void 0;
        }
        return "_regexp_".concat(value2.flags, "|").concat(value2.source);
      }
      if ((0, import_is_function.default)(value2)) {
        if (!options2.allowFunction) {
          return void 0;
        }
        var name2 = value2.name;
        var stringified = value2.toString();
        if (!stringified.match(/(\[native code\]|WEBPACK_IMPORTED_MODULE|__webpack_exports__|__webpack_require__)/)) {
          return "_function_".concat(name2, "|").concat(cleanCode(convertShorthandMethods(key2, stringified)));
        }
        return "_function_".concat(name2, "|").concat(function() {
        }.toString());
      }
      if ((0, import_is_symbol.default)(value2)) {
        if (!options2.allowSymbol) {
          return void 0;
        }
        var globalRegistryKey = Symbol.keyFor(value2);
        if (globalRegistryKey !== void 0) {
          return "_gsymbol_".concat(globalRegistryKey);
        }
        return "_symbol_".concat(value2.toString().slice(7, -1));
      }
      if (stack.length >= options2.maxDepth) {
        if (Array.isArray(value2)) {
          return "[Array(".concat(value2.length, ")]");
        }
        return "[Object]";
      }
      if (value2 === this) {
        return "_duplicate_".concat(JSON.stringify(keys));
      }
      if (value2.constructor && value2.constructor.name && value2.constructor.name !== "Object" && !Array.isArray(value2) && !options2.allowClass) {
        return void 0;
      }
      var found = objects.get(value2);
      if (!found) {
        var converted = Array.isArray(value2) ? value2 : convertUnconventionalData(value2);
        if (value2.constructor && value2.constructor.name && value2.constructor.name !== "Object" && !Array.isArray(value2) && options2.allowClass) {
          try {
            Object.assign(converted, {
              "_constructor-name_": value2.constructor.name
            });
          } catch (e) {
          }
        }
        keys.push(key2);
        stack.unshift(converted);
        objects.set(value2, JSON.stringify(keys));
        if (value2 !== converted) {
          map.set(value2, converted);
        }
        return converted;
      }
      return "_duplicate_".concat(found);
    } catch (e) {
      return void 0;
    }
  };
};
var reviver2 = function reviver(options) {
  var refs = [];
  var root;
  return function revive(key, value) {
    if (key === "") {
      root = value;
      refs.forEach(function(_ref) {
        var target = _ref.target, container = _ref.container, replacement = _ref.replacement;
        var replacementArr = isJSON(replacement) ? JSON.parse(replacement) : replacement.split(".");
        if (replacementArr.length === 0) {
          container[target] = root;
        } else {
          container[target] = (0, import_get.default)(root, replacementArr);
        }
      });
    }
    if (key === "_constructor-name_") {
      return value;
    }
    if (isObject2(value) && value["_constructor-name_"] && options.allowFunction) {
      var name = value["_constructor-name_"];
      if (name !== "Object") {
        var Fn = new Function("return function ".concat(name.replace(/[\W_]+/g, ""), "(){}"))();
        Object.setPrototypeOf(value, new Fn());
      }
      delete value["_constructor-name_"];
      return value;
    }
    if (typeof value === "string" && value.startsWith("_function_") && options.allowFunction) {
      var _ref2 = value.match(/_function_([^|]*)\|(.*)/) || [], _ref3 = _slicedToArray(_ref2, 3), _name = _ref3[1], source = _ref3[2];
      var sourceSanitized = source.replace(/[(\(\))|\\| |\]|`]*$/, "");
      if (!options.lazyEval) {
        return eval("(".concat(sourceSanitized, ")"));
      }
      var result = function result() {
        var f = eval("(".concat(sourceSanitized, ")"));
        return f.apply(void 0, arguments);
      };
      Object.defineProperty(result, "toString", {
        value: function value2() {
          return sourceSanitized;
        }
      });
      Object.defineProperty(result, "name", {
        value: _name
      });
      return result;
    }
    if (typeof value === "string" && value.startsWith("_regexp_") && options.allowRegExp) {
      var _ref4 = value.match(/_regexp_([^|]*)\|(.*)/) || [], _ref5 = _slicedToArray(_ref4, 3), flags = _ref5[1], _source = _ref5[2];
      return new RegExp(_source, flags);
    }
    if (typeof value === "string" && value.startsWith("_date_") && options.allowDate) {
      return new Date(value.replace("_date_", ""));
    }
    if (typeof value === "string" && value.startsWith("_duplicate_")) {
      refs.push({
        target: key,
        container: this,
        replacement: value.replace(/^_duplicate_/, "")
      });
      return null;
    }
    if (typeof value === "string" && value.startsWith("_symbol_") && options.allowSymbol) {
      return Symbol(value.replace("_symbol_", ""));
    }
    if (typeof value === "string" && value.startsWith("_gsymbol_") && options.allowSymbol) {
      return Symbol["for"](value.replace("_gsymbol_", ""));
    }
    if (typeof value === "string" && value === "_-Infinity_") {
      return -Infinity;
    }
    if (typeof value === "string" && value === "_Infinity_") {
      return Infinity;
    }
    if (typeof value === "string" && value === "_NaN_") {
      return NaN;
    }
    if (typeof value === "string" && value.startsWith("_bigint_") && typeof BigInt === "function") {
      return BigInt(value.replace("_bigint_", ""));
    }
    return value;
  };
};
var defaultOptions = {
  maxDepth: 10,
  space: void 0,
  allowFunction: true,
  allowRegExp: true,
  allowDate: true,
  allowClass: true,
  allowUndefined: true,
  allowSymbol: true,
  lazyEval: true
};
var stringify = function stringify2(data) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var mergedOptions = _objectSpread2(_objectSpread2({}, defaultOptions), options2);
  return JSON.stringify(convertUnconventionalData(data), replacer(mergedOptions), options2.space);
};
var mutator = function mutator2() {
  var mutated = /* @__PURE__ */ new Map();
  return function mutateUndefined(value2) {
    if (isObject2(value2)) {
      Object.entries(value2).forEach(function(_ref6) {
        var _ref7 = _slicedToArray(_ref6, 2), k = _ref7[0], v = _ref7[1];
        if (v === "_undefined_") {
          value2[k] = void 0;
        } else if (!mutated.get(v)) {
          mutated.set(v, true);
          mutateUndefined(v);
        }
      });
    }
    if (Array.isArray(value2)) {
      value2.forEach(function(v, index) {
        if (v === "_undefined_") {
          mutated.set(v, true);
          value2[index] = void 0;
        } else if (!mutated.get(v)) {
          mutated.set(v, true);
          mutateUndefined(v);
        }
      });
    }
  };
};
var parse = function parse2(data) {
  var options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var mergedOptions = _objectSpread2(_objectSpread2({}, defaultOptions), options2);
  var result2 = JSON.parse(data, reviver2(mergedOptions));
  mutator()(result2);
  return result2;
};

export {
  isJSON,
  replacer,
  reviver2 as reviver,
  stringify,
  parse
};
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
//# sourceMappingURL=chunk-2JCTH4DS.js.map
