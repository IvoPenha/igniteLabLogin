{
  "version": 3,
  "sources": ["../../@storybook/components/node_modules/core-js/modules/es.string.from-code-point.js", "../../@storybook/components/node_modules/core-js/modules/es.object.get-own-property-descriptor.js"],
  "sourcesContent": ["var $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar $RangeError = RangeError;\nvar fromCharCode = String.fromCharCode;\n// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing\nvar $fromCodePoint = String.fromCodePoint;\nvar join = uncurryThis([].join);\n\n// length should be 1, old FF problem\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\n\n// `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n$({ target: 'String', stat: true, arity: 1, forced: INCORRECT_LENGTH }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw $RangeError(code + ' is not a valid code point');\n      elements[i] = code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\n    } return join(elements, '');\n  }\n});\n", "var $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });\nvar FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\n$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {\n    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);\n  }\n});\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAI,IAAI;AACR,IAAI,cAAc;AAClB,IAAI,kBAAkB;AAEtB,IAAI,cAAc;AAClB,IAAI,eAAe,OAAO;AAE1B,IAAI,iBAAiB,OAAO;AAC5B,IAAI,OAAO,YAAY,CAAC,EAAE,IAAI;AAG9B,IAAI,mBAAmB,CAAC,CAAC,kBAAkB,eAAe,UAAU;AAIpE,EAAE,EAAE,QAAQ,UAAU,MAAM,MAAM,OAAO,GAAG,QAAQ,iBAAiB,GAAG;AAAA,EAEtE,eAAe,SAAS,cAAc,GAAG;AACvC,QAAI,WAAW,CAAC;AAChB,QAAI,SAAS,UAAU;AACvB,QAAI,IAAI;AACR,QAAI;AACJ,WAAO,SAAS,GAAG;AACjB,aAAO,CAAC,UAAU;AAClB,UAAI,gBAAgB,MAAM,OAAQ,MAAM;AAAM,cAAM,YAAY,OAAO,4BAA4B;AACnG,eAAS,KAAK,OAAO,QACjB,aAAa,IAAI,IACjB,eAAe,QAAQ,UAAY,MAAM,OAAQ,OAAO,OAAQ,KAAM;AAAA,IAC5E;AAAE,WAAO,KAAK,UAAU,EAAE;AAAA,EAC5B;AACF,CAAC;;;AC9BD,IAAIA,KAAI;AACR,IAAI,QAAQ;AACZ,IAAI,kBAAkB;AACtB,IAAI,iCAAiC,6CAA2D;AAChG,IAAI,cAAc;AAElB,IAAI,sBAAsB,MAAM,WAAY;AAAE,iCAA+B,CAAC;AAAG,CAAC;AAClF,IAAI,SAAS,CAAC,eAAe;AAI7BA,GAAE,EAAE,QAAQ,UAAU,MAAM,MAAM,QAAQ,QAAQ,MAAM,CAAC,YAAY,GAAG;AAAA,EACtE,0BAA0B,SAAS,yBAAyB,IAAI,KAAK;AACnE,WAAO,+BAA+B,gBAAgB,EAAE,GAAG,GAAG;AAAA,EAChE;AACF,CAAC;",
  "names": ["$"]
}
